package com.API_BioMeasure.Project.Service;

import com.API_BioMeasure.Project.DTO.UserDTO;
import com.API_BioMeasure.Project.Model.usuarios;
import com.API_BioMeasure.Project.Repository.UserRepository;
import com.API_BioMeasure.Project.Security.JwtUtil;
import jakarta.transaction.Transactional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

/**
 * Service para gerenciamento de usu√°rios
 * Respons√°vel pela l√≥gica de neg√≥cio relacionada a autentica√ß√£o e usu√°rios
 */
@Service
public class UserService {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private JwtUtil jwtUtil;

    /**
     * Lista todos os usu√°rios do sistema
     *
     * @return Lista de UserDTO com todos os usu√°rios
     */
    @Transactional
    public List<UserDTO> listarUsuarios() {
        try {
            List<usuarios> users = userRepository.findAll();

            if (users.isEmpty()) {
                System.out.println("‚ö†Ô∏è Nenhum usu√°rio encontrado no banco de dados");
            } else {
                System.out.println("‚úÖ " + users.size() + " usu√°rios encontrados");
            }

            return users.stream()
                    .map(UserDTO::new)
                    .collect(Collectors.toList());

        } catch (Exception e) {
            System.err.println("‚ùå Erro ao listar usu√°rios: " + e.getMessage());
            throw new RuntimeException("Erro ao listar usu√°rios", e);
        }
    }

    /**
     * Realiza login e retorna token JWT se as credenciais forem v√°lidas
     *
     * @param email Email do usu√°rio
     * @param senha Senha do usu√°rio
     * @return Token JWT se autenticado, ou lan√ßa exce√ß√£o
     * @throws RuntimeException Se credenciais inv√°lidas
     */
    @Transactional
    public String loginComToken(String email, String senha) {
        try {
            // Validar entrada
            if (email == null || email.trim().isEmpty()) {
                throw new IllegalArgumentException("Email n√£o pode estar vazio");
            }

            if (senha == null || senha.trim().isEmpty()) {
                throw new IllegalArgumentException("Senha n√£o pode estar vazia");
            }

            System.out.println("üîê Tentando autenticar usu√°rio: " + email);

            // ‚úÖ CORRE√á√ÉO: Buscar usu√°rio corretamente
            usuarios usuario = userRepository.findByEmailAndSenha(email, senha);

            // Verificar se usu√°rio foi encontrado
            if (usuario == null) {
                System.err.println("‚ùå Credenciais inv√°lidas para: " + email);
                throw new RuntimeException("Credenciais inv√°lidas! Email ou senha incorretos.");
            }

            // Gerar token JWT
            String token = jwtUtil.generateToken(email);

            System.out.println("‚úÖ Login bem-sucedido para: " + email);
            System.out.println("üé´ Token gerado com sucesso");

            return token;

        } catch (IllegalArgumentException e) {
            System.err.println("‚ùå Erro de valida√ß√£o: " + e.getMessage());
            throw e;
        } catch (Exception e) {
            System.err.println("‚ùå Erro ao fazer login: " + e.getMessage());
            throw new RuntimeException("Erro ao processar login: " + e.getMessage(), e);
        }
    }

    /**
     * Valida um token JWT
     *
     * @param token Token JWT a ser validado
     * @param email Email do usu√°rio
     * @return true se v√°lido, false caso contr√°rio
     */
    public boolean validarToken(String token, String email) {
        try {
            if (token == null || token.trim().isEmpty()) {
                System.err.println("‚ùå Token vazio ou nulo");
                return false;
            }

            boolean valido = jwtUtil.validateToken(token, email);

            if (valido) {
                System.out.println("‚úÖ Token v√°lido para: " + email);
            } else {
                System.err.println("‚ùå Token inv√°lido para: " + email);
            }

            return valido;

        } catch (Exception e) {
            System.err.println("‚ùå Erro ao validar token: " + e.getMessage());
            return false;
        }
    }

    /**
     * Busca um usu√°rio por ID
     *
     * @param id ID do usu√°rio
     * @return UserDTO do usu√°rio encontrado
     * @throws RuntimeException Se usu√°rio n√£o encontrado
     */
    @Transactional
    public UserDTO buscarUsuarioPorId(Integer id) {
        try {
            Optional<usuarios> usuario = userRepository.findById(id);

            if (usuario.isEmpty()) {
                throw new RuntimeException("Usu√°rio com ID " + id + " n√£o encontrado");
            }

            System.out.println("‚úÖ Usu√°rio encontrado: ID " + id);
            return new UserDTO(usuario.get());

        } catch (Exception e) {
            System.err.println("‚ùå Erro ao buscar usu√°rio por ID: " + e.getMessage());
            throw new RuntimeException("Erro ao buscar usu√°rio", e);
        }
    }

    /**
     * Busca um usu√°rio por email
     *
     * @param email Email do usu√°rio
     * @return usuarios encontrado ou null
     */
    @Transactional
    public usuarios buscarUsuarioPorEmail(String email) {
        try {
            if (email == null || email.trim().isEmpty()) {
                throw new IllegalArgumentException("Email n√£o pode estar vazio");
            }

            // Voc√™ precisar√° adicionar este m√©todo no UserRepository
            // usuarios usuario = userRepository.findByEmail(email);

            List<usuarios> todosUsuarios = userRepository.findAll();
            return todosUsuarios.stream()
                    .filter(u -> u.getEmail().equalsIgnoreCase(email))
                    .findFirst()
                    .orElse(null);

        } catch (Exception e) {
            System.err.println("‚ùå Erro ao buscar usu√°rio por email: " + e.getMessage());
            throw new RuntimeException("Erro ao buscar usu√°rio", e);
        }
    }

    /**
     * Registra um novo usu√°rio
     *
     * @param usuario Dados do novo usu√°rio
     * @return Usuario cadastrado
     * @throws RuntimeException Se email j√° existe
     */
    @Transactional
    public usuarios registrarUsuario(usuarios usuario) {
        try {
            // Valida√ß√µes
            if (usuario.getEmail() == null || usuario.getEmail().trim().isEmpty()) {
                throw new IllegalArgumentException("Email √© obrigat√≥rio");
            }

            if (usuario.getSenha() == null || usuario.getSenha().trim().isEmpty()) {
                throw new IllegalArgumentException("Senha √© obrigat√≥ria");
            }

            // Verificar se email j√° existe
            usuarios usuarioExistente = buscarUsuarioPorEmail(usuario.getEmail());
            if (usuarioExistente != null) {
                throw new RuntimeException("Email j√° cadastrado no sistema");
            }

            // Salvar usu√°rio
            usuarios novoUsuario = userRepository.save(usuario);

            System.out.println("‚úÖ Novo usu√°rio cadastrado: " + novoUsuario.getEmail());

            return novoUsuario;

        } catch (IllegalArgumentException e) {
            System.err.println("‚ùå Erro de valida√ß√£o: " + e.getMessage());
            throw e;
        } catch (Exception e) {
            System.err.println("‚ùå Erro ao registrar usu√°rio: " + e.getMessage());
            throw new RuntimeException("Erro ao registrar usu√°rio: " + e.getMessage(), e);
        }
    }

    /**
     * Atualiza dados de um usu√°rio
     *
     * @param id ID do usu√°rio
     * @param usuarioAtualizado Dados atualizados
     * @return Usuario atualizado
     * @throws RuntimeException Se usu√°rio n√£o encontrado
     */
    @Transactional
    public usuarios atualizarUsuario(Integer id, usuarios usuarioAtualizado) {
        try {
            Optional<usuarios> usuarioExistente = userRepository.findById(id);

            if (usuarioExistente.isEmpty()) {
                throw new RuntimeException("Usu√°rio com ID " + id + " n√£o encontrado");
            }

            usuarios usuario = usuarioExistente.get();

            // Atualizar campos (n√£o atualizar email se j√° existir)
            if (usuarioAtualizado.getSenha() != null && !usuarioAtualizado.getSenha().isEmpty()) {
                usuario.setSenha(usuarioAtualizado.getSenha());
            }

            usuarios atualizado = userRepository.save(usuario);

            System.out.println("‚úÖ Usu√°rio atualizado: ID " + id);

            return atualizado;

        } catch (Exception e) {
            System.err.println("‚ùå Erro ao atualizar usu√°rio: " + e.getMessage());
            throw new RuntimeException("Erro ao atualizar usu√°rio", e);
        }
    }

    /**
     * Deleta um usu√°rio
     *
     * @param id ID do usu√°rio a ser deletado
     * @throws RuntimeException Se usu√°rio n√£o encontrado
     */
    @Transactional
    public void deletarUsuario(Integer id) {
        try {
            if (!userRepository.existsById(id)) {
                throw new RuntimeException("Usu√°rio com ID " + id + " n√£o encontrado");
            }

            userRepository.deleteById(id);

            System.out.println("‚úÖ Usu√°rio deletado: ID " + id);

        } catch (Exception e) {
            System.err.println("‚ùå Erro ao deletar usu√°rio: " + e.getMessage());
            throw new RuntimeException("Erro ao deletar usu√°rio", e);
        }
    }

    /**
     * Verifica se um usu√°rio existe por email
     *
     * @param email Email a verificar
     * @return true se existe, false caso contr√°rio
     */
    public boolean usuarioExiste(String email) {
        try {
            usuarios usuario = buscarUsuarioPorEmail(email);
            return usuario != null;
        } catch (Exception e) {
            return false;
        }
    }

    /**
     * Conta total de usu√°rios cadastrados
     *
     * @return N√∫mero total de usu√°rios
     */
    public long contarUsuarios() {
        try {
            long total = userRepository.count();
            System.out.println("üìä Total de usu√°rios: " + total);
            return total;
        } catch (Exception e) {
            System.err.println("‚ùå Erro ao contar usu√°rios: " + e.getMessage());
            throw new RuntimeException("Erro ao contar usu√°rios", e);
        }
    }

    /**
     * Renova o token JWT de um usu√°rio
     *
     * @param tokenAntigo Token JWT antigo
     * @return Novo token JWT
     */
    public String renovarToken(String tokenAntigo) {
        try {
            String email = jwtUtil.extractUsername(tokenAntigo);

            // Verificar se usu√°rio ainda existe
            usuarios usuario = buscarUsuarioPorEmail(email);
            if (usuario == null) {
                throw new RuntimeException("Usu√°rio n√£o encontrado");
            }

            // Gerar novo token
            String novoToken = jwtUtil.generateToken(email);

            System.out.println("üîÑ Token renovado para: " + email);

            return novoToken;

        } catch (Exception e) {
            System.err.println("‚ùå Erro ao renovar token: " + e.getMessage());
            throw new RuntimeException("Erro ao renovar token", e);
        }
    }
}